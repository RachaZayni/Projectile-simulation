<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Lorsqu’on appliquera la 2ème loi de Newton dans le référentiel considéré, on trouvera : mg=ma —&gt; a=g. Ceci se traduit par d²x/dt²=0, d²y/dt²=-g et d²z/dt²=0
qui s’intègre en : dx/dt=A, dz/dt=B, dy/dt=-g.t+C où A, B et C sont des constantes d’intégration.

Pour trouver ces constantes d’intégration, on utilise les conditions initiales pour la vitesse puisque vx=dx/dt, vy=dy/dt et vz=dz/dt.
Ainsi, à t=0, dx/dt=A, dz/dt=B et dy/dt=C. Or, vx0=V0.cos θ0, vz0=0 et vy0=V0.sin θ0 d’où : A=V0.cos θ0, B=0 et C=V0.sin θ0 et on peut donc écrire : dx/dt=V0.cos θ0, dz/dt=0, dy/dt=-g.t+V0.sin θ0

Pour conclure, il ne reste plus qu’à intégrer tout ça encore une fois : x=V0.cos θ.t+D, z=E, y=-g.t²/2+V0.sin θ.t+F où D, E et F sont de constantes d’intégration.
Une nouvelle fois, pour trouver la valeur de ces constantes d’intégration, il faudra aller voir du côté des conditions initiales. Mais cette fois-ci ce n’est pas la vitesse initiale qui nous intéresse mais la position initiale. 
Comme on a centré le repère sur la position initiale, x0=y0=z0=0, d’où D=E=F=0.
Ainsi, on trouve au final que : x(t)=V0.cos θ0.t, z(t)=0, y(t)=-g.t²/2+V0.sin θ0.t .


Ces trois équations sont les équations horaires du mouvement. Bien sûr, selon l’énoncé elles peuvent être légèrement différente.
 Maintenant si on cherche t en fct de x on trouve que t=(x-x0)/V0cos?, remplaçons alors cette dernière expression dans y(t) où
 on aura: y=-1/2(g((x-x0)/v0cos θ0)^2)....
Ce résulta est un equation de parabole et cela ce qu’on observe dans un projectile.

</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>La vitesse est tangente à la courbe. Le vecteur accélération se trace par différence entre 2 vecteurs vitesse . 
Puisque le projectile n’est soumis qu’à son poids, on doit trouver celle-ci verticale, dirigée vers le bas.</value>
  </data>
</root>